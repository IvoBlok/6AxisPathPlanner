;---------------- Declarations --------------
DECL INT HANDLE, I, CREAD_OFFSET, ANSWER, NUMBER
DECL CHAR NOTIFY_TEXT[5], READ_STRING[20]
DECL REAL TIMEOUT

DECL STATE_T CWRITE_STATE, CREAD_STATE
DECL MODUS_T MODUS
DECL AXIS HOME

DECL CHAR MOVETYPE[8]
DECL POS MOVPOS[8]
DECL POS AUXPOS[8]

DECL INT RINGBUFFER_SIZE
DECL INT RINGBUFFER_BEGIN, RINGBUFFER_END

DECL BOOL LASTCOMMANDRECEIVED

;---------------- Initialization --------------
BAS (#INITMOV, 0)

$BASE=BASE_DATA[1]
$TOOL=TOOL_DATA[2]
$ADVANCE=1
$STOPNOAPROX=FALSE

HOME={AXIS: A1 0,A2 -90,A3 90,A4 0,A5 0,A6 0}

I=1
MODUS=#ABS
TIMEOUT=5.0
LASTCOMMANDRECEIVED=FALSE

RINGBUFFER_BEGIN=1
RINGBUFFER_END=2
RINGBUFFER_SIZE=8

; define speed for LIN and CIRC moves for the full program
$VEL.CP=0.2 ;(m/s)
; define speed for PIP moves for the full program

;---------------- Main Program --------------

COPEN(:SER_2,HANDLE)

IF HANDLE==0 THEN
HALT
ENDIF

PIP HOME

; initialize the full ring buffer

CWRITE(HANDLE,CWRITE_STATE,MODUS,"#")
CREAD_OFFSET=0

CREAD(HANDLE,CREAD_STATE,MODUS,TIMEOUT,CREAD_OFFSET,"%c %f %f %f %f %f %f %f %f %f %f %f %f",MOVETYPE[1],MOVPOS[1].X,MOVPOS[1].Y,MOVPOS[1].Z,MOVPOS[1].A,MOVPOS[1].B,MOVPOS[1].C,AUXPOS[1].X,AUXPOS[1].Y,AUXPOS[1].Z,AUXPOS[1].A,AUXPOS[1].B,AUXPOS[1].C)

WHILE TRUE

CWRITE(HANDLE,CWRITE_STATE,MODUS,"#")
CREAD_OFFSET=0

CREAD(HANDLE,CREAD_STATE,MODUS,TIMEOUT,CREAD_OFFSET,"%c %f %f %f %f %f %f %f %f %f %f %f %f",MOVETYPE[RINGBUFFER_END],MOVPOS[RINGBUFFER_END].X,MOVPOS[RINGBUFFER_END].Y,MOVPOS[RINGBUFFER_END].Z,MOVPOS[RINGBUFFER_END].A,MOVPOS[RINGBUFFER_END].B,MOVPOS[RINGBUFFER_END].C,AUXPOS[RINGBUFFER_END].X,AUXPOS[1].Y,AUXPOS[RINGBUFFER_END].Z,AUXPOS[RINGBUFFER_END].A,AUXPOS[RINGBUFFER_END].B,AUXPOS[RINGBUFFER_END].C)

IF CREAD_STATE.RET1==#CMD_TIMEOUT THEN
EXIT
ENDIF

RINGBUFFER_END=RINGBUFFER_END+1
IF RINGBUFFER_END>RINGBUFFER_SIZE THEN
RINGBUFFER_END=1
ENDIF

IF RINGBUFFER_END==RINGBUFFER_BEGIN THEN
EXIT
ENDIF

ENDWHILE

; main loop
WHILE TRUE

; execute the given type of move to the given point(s)

; detect if the last executed move command was the last one in the ring buffer, if so: nothing is left to execute, thus exit
IF LASTCOMMANDRECEIVED THEN
IF RINGBUFFER_BEGIN==RINGBUFFER_END THEN
EXIT
ENDIF
ENDIF

IF MOVETYPE[RINGBUFFER_BEGIN]=="P" THEN
PIP MOVEPOS[RINGBUFFER_BEGIN] C_PIP C_DIS
ENDIF
IF MOVETYPE[RINGBUFFER_BEGIN]=="L" THEN
LIN MOVPOS[RINGBUFFER_BEGIN] C_DIS
ENDIF
IF MOVETYPE[RINGBUFFER_BEGIN]=="C" THEN
CIRC AUXPOS[RINGBUFFER_BEGIN],MOVPOS[RINGBUFFER_BEGIN] C_DIS ; ? Why a comma here? probably a bug that wasn't picked up because CIRC commands have a minimum traveled distance which is rather significant, so this func has barely (if ever) ever been called
ENDIF

RINGBUFFER_BEGIN=RINGBUFFER_BEGIN+1
IF RINGBUFFER_BEGIN>RINGBUFFER_SIZE THEN
RINGBUFFER_BEGIN=1
ENDIF

; read from COM2 if the ring buffer has space

IF RINGBUFFER_END<>RINGBUFFER_BEGIN THEN
IF LASTCOMMANDRECEIVED==FALSE THEN

CONTINUE
CWRITE(HANDLE,CWRITE_STATE,MODUS,"#")
CREAD_OFFSET=0

CONTINUE
CREAD(HANDLE,CREAD_STATE,MODUS,TIMEOUT,CREAD_OFFSET,"%c %f %f %f %f %f %f %f %f %f %f %f %f",MOVETYPE[RINGBUFFER_END],MOVPOS[RINGBUFFER_END].X,MOVPOS[RINGBUFFER_END].Y,MOVPOS[RINGBUFFER_END].Z,MOVPOS[RINGBUFFER_END].A,MOVPOS[RINGBUFFER_END].B,MOVPOS[RINGBUFFER_END].C,AUXPOS[RINGBUFFER_END].X,AUXPOS[1].Y,AUXPOS[RINGBUFFER_END].Z,AUXPOS[RINGBUFFER_END].A,AUXPOS[RINGBUFFER_END].B,AUXPOS[RINGBUFFER_END].C)

IF MOVETYPE[RINGBUFFER_END]=="E" THEN
LASTCOMMANDRECEIVED=TRUE
ENDIF

IF CREAD_STATE.RET1==#CMD_TIMEOUT THEN
LASTCOMMANDRECEIVED=TRUE
ENDIF

IF LASTCOMMANDRECEIVED==FALSE THEN
RINGBUFFER_END=RINGBUFFER_END+1
IF RINGBUFFER_END>RINGBUFFER_SIZE THEN
RINGBUFFER_END=1
ENDIF
ENDIF
ENDIF
ENDIF

I=I+1
ENDWHILE

PIP HOME

CCLOSE(HANDLE,CWRITE_STATE)




DEF NOTIFY_REAL (NOTIFY__TEXT[] :OUT,NUMBR :IN )

DECL CHAR CHARACTER,NOTIFY__TEXT[]
DECL REAL NUMBR
DECL INT MSG_OFFSET
DECL MSG_T EMPTY_MSG
DECL STATE_T MSG_STATE

WAIT SEC 1.5
EMPTY_MSG={MSG_T: VALID FALSE,RELEASE FALSE,TYP #NOTIFY,MODUL[] " ",KEY[] " ",PARAM_TYP #VALUE,PARAM[] " ",DLG_FORMAT[] " ",ANSWER 0}

$MSG_T=EMPTY_MSG

MSG_OFFSET=0
$WRITE($MSG_T.KEY[],MSG_STATE,MSG_OFFSET,NOTIFY__TEXT[])
$WRITE($MSG_T.KEY[],MSG_STATE,MSG_OFFSET,"%f",NUMBR)
$MSG_T.TYP=#NOTIFY
WAIT SEC 0.2
$MSG_T.VALID=TRUE
WAIT SEC 0.2

END

DEF NOTIFY_INT (NOTIFY__TEXT[] :OUT,NUMBR :IN )

DECL CHAR NOTIFY__TEXT[]
DECL INT NUMBR,MSG_OFFSET
DECL MSG_T EMPTY_MSG
DECL STATE_T MSG_STATE

WAIT SEC 1.5
EMPTY_MSG={MSG_T: VALID FALSE,RELEASE FALSE,TYP #NOTIFY,MODUL[] " ",KEY[] " ",PARAM_TYP #VALUE,PARAM[] " ",DLG_FORMAT[] " ",ANSWER 0}

$MSG_T=EMPTY_MSG

MSG_OFFSET=0
$WRITE($MSG_T.KEY[],MSG_STATE,MSG_OFFSET,NOTIFY__TEXT[])
$WRITE($MSG_T.KEY[],MSG_STATE,MSG_OFFSET,"%d",NUMBR)
$MSG_T.TYP=#NOTIFY
WAIT SEC 0.2
$MSG_T.VALID=TRUE
WAIT SEC 0.2

END

DEF NOTIFY_STR (NOTIFY__TEXT[] :OUT,READ_STR[] :OUT )

DECL CHAR NOTIFY__TEXT[],READ_STR[]
DECL INT MSG_OFFSET
DECL MSG_T EMPTY_MSG
DECL STATE_T MSG_STATE

WAIT SEC 1.5
EMPTY_MSG={MSG_T: VALID FALSE,RELEASE FALSE,TYP #NOTIFY,MODUL[] " ",KEY[] " ",PARAM_TYP #VALUE,PARAM[] " ",DLG_FORMAT[] " ",ANSWER 0}

$MSG_T=EMPTY_MSG

MSG_OFFSET=0
$WRITE($MSG_T.KEY[],MSG_STATE,MSG_OFFSET,NOTIFY__TEXT[])
$WRITE($MSG_T.KEY[],MSG_STATE,MSG_OFFSET,READ+STR[])
$MSG_T.TYP=#NOTIFY
WAIT SEC 0.2
$MSG_T.VALID=TRUE
WAIT SEC 0.2

END